namespace EnergyTrading.MDM.ServiceHost.Wcf.Nexus.Mappers
{
    using System.Collections.Generic;

    using AutoMapper;

    using EnergyTrading.Mdm.Contracts;

    using Agreement = OpenNexus.MDM.Contracts.Agreement;
    using AgreementDetails = OpenNexus.MDM.Contracts.AgreementDetails;
    using Audit = EnergyTrading.Mdm.Contracts.Audit;
    using Book = OpenNexus.MDM.Contracts.Book;
    using BookDefault = OpenNexus.MDM.Contracts.BookDefault;
    using BookDefaultDetails = OpenNexus.MDM.Contracts.BookDefaultDetails;
    using BookDetails = OpenNexus.MDM.Contracts.BookDetails;
    using Broker = OpenNexus.MDM.Contracts.Broker;
    using BrokerCommodity = OpenNexus.MDM.Contracts.BrokerCommodity;
    using BrokerCommodityDetails = OpenNexus.MDM.Contracts.BrokerCommodityDetails;
    using BrokerDetails = OpenNexus.MDM.Contracts.BrokerDetails;
    using BrokerRate = OpenNexus.MDM.Contracts.BrokerRate;
    using BrokerRateDetails = OpenNexus.MDM.Contracts.BrokerRateDetails;
    using BusinessUnit = OpenNexus.MDM.Contracts.BusinessUnit;
    using BusinessUnitDetails = OpenNexus.MDM.Contracts.BusinessUnitDetails;
    using Calendar = OpenNexus.MDM.Contracts.Calendar;
    using CalendarDay = OpenNexus.MDM.Contracts.CalendarDay;
    using CalendarDayList = OpenNexus.MDM.Contracts.CalendarDayList;
    using CalendarDetails = OpenNexus.MDM.Contracts.CalendarDetails;
    using Commodity = OpenNexus.MDM.Contracts.Commodity;
    using CommodityDetails = OpenNexus.MDM.Contracts.CommodityDetails;
    using CommodityFeeType = OpenNexus.MDM.Contracts.CommodityFeeType;
    using CommodityFeeTypeDetails = OpenNexus.MDM.Contracts.CommodityFeeTypeDetails;
    using CommodityInstrumentType = OpenNexus.MDM.Contracts.CommodityInstrumentType;
    using CommodityInstrumentTypeDetails = OpenNexus.MDM.Contracts.CommodityInstrumentTypeDetails;
    using Counterparty = OpenNexus.MDM.Contracts.Counterparty;
    using CounterpartyDetails = OpenNexus.MDM.Contracts.CounterpartyDetails;
    using Curve = OpenNexus.MDM.Contracts.Curve;
    using CurveDetails = OpenNexus.MDM.Contracts.CurveDetails;
    using Dimension = OpenNexus.MDM.Contracts.Dimension;
    using DimensionDetails = OpenNexus.MDM.Contracts.DimensionDetails;
    using EntityId = EnergyTrading.Mdm.Contracts.EntityId;
    using Exchange = OpenNexus.MDM.Contracts.Exchange;
    using ExchangeDetails = OpenNexus.MDM.Contracts.ExchangeDetails;
    using Fault = EnergyTrading.Mdm.Contracts.Fault;
    using FeeType = OpenNexus.MDM.Contracts.FeeType;
    using FeeTypeDetails = OpenNexus.MDM.Contracts.FeeTypeDetails;
    using Header = EnergyTrading.Mdm.Contracts.Header;
    using Hierarchy = OpenNexus.MDM.Contracts.Hierarchy;
    using HierarchyDetails = OpenNexus.MDM.Contracts.HierarchyDetails;
    using InstrumentType = OpenNexus.MDM.Contracts.InstrumentType;
    using InstrumentTypeDetails = OpenNexus.MDM.Contracts.InstrumentTypeDetails;
    using InstrumentTypeOverride = OpenNexus.MDM.Contracts.InstrumentTypeOverride;
    using InstrumentTypeOverrideDetails = OpenNexus.MDM.Contracts.InstrumentTypeOverrideDetails;
    using LegacyAgreement = RWEST.Nexus.MDM.Contracts.Agreement;
    using LegacyAgreementDetails = RWEST.Nexus.MDM.Contracts.AgreementDetails;
    using LegacyAudit = RWEST.Nexus.MDM.Contracts.Audit;
    using LegacyBook = RWEST.Nexus.MDM.Contracts.Book;
    using LegacyBookDefault = RWEST.Nexus.MDM.Contracts.BookDefault;
    using LegacyBookDefaultDetails = RWEST.Nexus.MDM.Contracts.BookDefaultDetails;
    using LegacyBookDetails = RWEST.Nexus.MDM.Contracts.BookDetails;
    using LegacyBroker = RWEST.Nexus.MDM.Contracts.Broker;
    using LegacyBrokerCommodity = RWEST.Nexus.MDM.Contracts.BrokerCommodity;
    using LegacyBrokerCommodityDetails = RWEST.Nexus.MDM.Contracts.BrokerCommodityDetails;
    using LegacyBrokerDetails = RWEST.Nexus.MDM.Contracts.BrokerDetails;
    using LegacyBrokerRate = RWEST.Nexus.MDM.Contracts.BrokerRate;
    using LegacyBrokerRateDetails = RWEST.Nexus.MDM.Contracts.BrokerRateDetails;
    using LegacyBusinessUnit = RWEST.Nexus.MDM.Contracts.BusinessUnit;
    using LegacyBusinessUnitDetails = RWEST.Nexus.MDM.Contracts.BusinessUnitDetails;
    using LegacyCalendar = RWEST.Nexus.MDM.Contracts.Calendar;
    using LegacyCalendarDay = RWEST.Nexus.MDM.Contracts.CalendarDay;
    using LegacyCalendarDayList = RWEST.Nexus.MDM.Contracts.CalendarDayList;
    using LegacyCalendarDetails = RWEST.Nexus.MDM.Contracts.CalendarDetails;
    using LegacyCommodity = RWEST.Nexus.MDM.Contracts.Commodity;
    using LegacyCommodityDetails = RWEST.Nexus.MDM.Contracts.CommodityDetails;
    using LegacyCommodityFeeType = RWEST.Nexus.MDM.Contracts.CommodityFeeType;
    using LegacyCommodityFeeTypeDetails = RWEST.Nexus.MDM.Contracts.CommodityFeeTypeDetails;
    using LegacyCommodityInstrumentType = RWEST.Nexus.MDM.Contracts.CommodityInstrumentType;
    using LegacyCommodityInstrumentTypeDetails = RWEST.Nexus.MDM.Contracts.CommodityInstrumentTypeDetails;
    using LegacyCounterparty = RWEST.Nexus.MDM.Contracts.Counterparty;
    using LegacyCounterpartyDetails = RWEST.Nexus.MDM.Contracts.CounterpartyDetails;
    using LegacyCurve = RWEST.Nexus.MDM.Contracts.Curve;
    using LegacyCurveDetails = RWEST.Nexus.MDM.Contracts.CurveDetails;
    using LegacyDimension = RWEST.Nexus.MDM.Contracts.Dimension;
    using LegacyDimensionDetails = RWEST.Nexus.MDM.Contracts.DimensionDetails;
    using LegacyEntityId = RWEST.Nexus.MDM.Contracts.EntityId;
    using LegacyExchange = RWEST.Nexus.MDM.Contracts.Exchange;
    using LegacyExchangeDetails = RWEST.Nexus.MDM.Contracts.ExchangeDetails;
    using LegacyFault = RWEST.Nexus.MDM.Contracts.Fault;
    using LegacyFeeType = RWEST.Nexus.MDM.Contracts.FeeType;
    using LegacyFeeTypeDetails = RWEST.Nexus.MDM.Contracts.FeeTypeDetails;
    using LegacyHeader = RWEST.Nexus.MDM.Contracts.Header;
    using LegacyHierarchy = RWEST.Nexus.MDM.Contracts.Hierarchy;
    using LegacyHierarchyDetails = RWEST.Nexus.MDM.Contracts.HierarchyDetails;
    using LegacyInstrumentType = RWEST.Nexus.MDM.Contracts.InstrumentType;
    using LegacyInstrumentTypeDetails = RWEST.Nexus.MDM.Contracts.InstrumentTypeDetails;
    using LegacyInstrumentTypeOverride = RWEST.Nexus.MDM.Contracts.InstrumentTypeOverride;
    using LegacyInstrumentTypeOverrideDetails = RWEST.Nexus.MDM.Contracts.InstrumentTypeOverrideDetails;
    using LegacyLegalEntity = RWEST.Nexus.MDM.Contracts.LegalEntity;
    using LegacyLegalEntityDetails = RWEST.Nexus.MDM.Contracts.LegalEntityDetails;
    using LegacyLink = RWEST.Nexus.Contracts.Atom.Link;
    using LegacyLocation = RWEST.Nexus.MDM.Contracts.Location;
    using LegacyLocationDetails = RWEST.Nexus.MDM.Contracts.LocationDetails;
    using LegacyLocationRole = RWEST.Nexus.MDM.Contracts.LocationRole;
    using LegacyLocationRoleDetails = RWEST.Nexus.MDM.Contracts.LocationRoleDetails;
    using LegacyMapping = RWEST.Nexus.MDM.Contracts.Mapping;
    using LegacyMappingResponse = RWEST.Nexus.MDM.Contracts.MappingResponse;
    using LegacyMarket = RWEST.Nexus.MDM.Contracts.Market;
    using LegacyMarketDetails = RWEST.Nexus.MDM.Contracts.MarketDetails;
    using LegacyNexusFailure = RWEST.Nexus.MDM.Contracts.NexusFailure;
    using LegacyNexusId = RWEST.Nexus.MDM.Contracts.NexusId;
    using LegacyNexusIdList = RWEST.Nexus.MDM.Contracts.NexusIdList;
    using LegacyParty = RWEST.Nexus.MDM.Contracts.Party;
    using LegacyPartyAccountability = RWEST.Nexus.MDM.Contracts.PartyAccountability;
    using LegacyPartyAccountabilityDetails = RWEST.Nexus.MDM.Contracts.PartyAccountabilityDetails;
    using LegacyPartyCommodity = RWEST.Nexus.MDM.Contracts.PartyCommodity;
    using LegacyPartyCommodityDetails = RWEST.Nexus.MDM.Contracts.PartyCommodityDetails;
    using LegacyPartyDetails = RWEST.Nexus.MDM.Contracts.PartyDetails;
    using LegacyPartyOverride = RWEST.Nexus.MDM.Contracts.PartyOverride;
    using LegacyPartyOverrideDetails = RWEST.Nexus.MDM.Contracts.PartyOverrideDetails;
    using LegacyPartyRole = RWEST.Nexus.MDM.Contracts.PartyRole;
    using LegacyPartyRoleAccountability = RWEST.Nexus.MDM.Contracts.PartyRoleAccountability;
    using LegacyPartyRoleAccountabilityDetails = RWEST.Nexus.MDM.Contracts.PartyRoleAccountabilityDetails;
    using LegacyPartyRoleDetails = RWEST.Nexus.MDM.Contracts.PartyRoleDetails;
    using LegacyPerson = RWEST.Nexus.MDM.Contracts.Person;
    using LegacyPersonDetails = RWEST.Nexus.MDM.Contracts.PersonDetails;
    using LegacyPortfolio = RWEST.Nexus.MDM.Contracts.Portfolio;
    using LegacyPortfolioDetails = RWEST.Nexus.MDM.Contracts.PortfolioDetails;
    using LegacyPortfolioHierarchy = RWEST.Nexus.MDM.Contracts.PortfolioHierarchy;
    using LegacyPortfolioHierarchyDetails = RWEST.Nexus.MDM.Contracts.PortfolioHierarchyDetails;
    using LegacyProduct = RWEST.Nexus.MDM.Contracts.Product;
    using LegacyProductCurve = RWEST.Nexus.MDM.Contracts.ProductCurve;
    using LegacyProductCurveDetails = RWEST.Nexus.MDM.Contracts.ProductCurveDetails;
    using LegacyProductDetails = RWEST.Nexus.MDM.Contracts.ProductDetails;
    using LegacyProductScota = RWEST.Nexus.MDM.Contracts.ProductScota;
    using LegacyProductScotaDetails = RWEST.Nexus.MDM.Contracts.ProductScotaDetails;
    using LegacyProductTenorType = RWEST.Nexus.MDM.Contracts.ProductTenorType;
    using LegacyProductTenorTypeDetails = RWEST.Nexus.MDM.Contracts.ProductTenorTypeDetails;
    using LegacyProductType = RWEST.Nexus.MDM.Contracts.ProductType;
    using LegacyProductTypeDetails = RWEST.Nexus.MDM.Contracts.ProductTypeDetails;
    using LegacyProductTypeInstance = RWEST.Nexus.MDM.Contracts.ProductTypeInstance;
    using LegacyProductTypeInstanceDetails = RWEST.Nexus.MDM.Contracts.ProductTypeInstanceDetails;
    using LegacySettlementContact = RWEST.Nexus.MDM.Contracts.SettlementContact;
    using LegacySettlementContactDetails = RWEST.Nexus.MDM.Contracts.SettlementContactDetails;
    using LegacyShape = RWEST.Nexus.MDM.Contracts.Shape;
    using LegacyShapeDay = RWEST.Nexus.MDM.Contracts.ShapeDay;
    using LegacyShapeDayDetails = RWEST.Nexus.MDM.Contracts.ShapeDayDetails;
    using LegacyShapeDetails = RWEST.Nexus.MDM.Contracts.ShapeDetails;
    using LegacyShapeElement = RWEST.Nexus.MDM.Contracts.ShapeElement;
    using LegacyShapeElementDetails = RWEST.Nexus.MDM.Contracts.ShapeElementDetails;
    using LegacyShipperCode = RWEST.Nexus.MDM.Contracts.ShipperCode;
    using LegacyShipperCodeDetails = RWEST.Nexus.MDM.Contracts.ShipperCodeDetails;
    using LegacySourceSystem = RWEST.Nexus.MDM.Contracts.SourceSystem;
    using LegacySourceSystemDetails = RWEST.Nexus.MDM.Contracts.SourceSystemDetails;
    using LegacySystemData = RWEST.Nexus.MDM.Contracts.SystemData;
    using LegacyTenor = RWEST.Nexus.MDM.Contracts.Tenor;
    using LegacyTenorDetails = RWEST.Nexus.MDM.Contracts.TenorDetails;
    using LegacyTenorType = RWEST.Nexus.MDM.Contracts.TenorType;
    using LegacyTenorTypeDetails = RWEST.Nexus.MDM.Contracts.TenorTypeDetails;
    using LegacyUnit = RWEST.Nexus.MDM.Contracts.Unit;
    using LegacyUnitDetails = RWEST.Nexus.MDM.Contracts.UnitDetails;
    using LegacyVessel = RWEST.Nexus.MDM.Contracts.Vessel;
    using LegacyVesselDetails = RWEST.Nexus.MDM.Contracts.VesselDetails;
    using LegalEntity = OpenNexus.MDM.Contracts.LegalEntity;
    using LegalEntityDetails = OpenNexus.MDM.Contracts.LegalEntityDetails;
    using Link = EnergyTrading.Contracts.Atom.Link;
    using Location = OpenNexus.MDM.Contracts.Location;
    using LocationDetails = OpenNexus.MDM.Contracts.LocationDetails;
    using LocationRole = OpenNexus.MDM.Contracts.LocationRole;
    using LocationRoleDetails = OpenNexus.MDM.Contracts.LocationRoleDetails;
    using Mapping = EnergyTrading.Mdm.Contracts.Mapping;
    using MappingResponse = EnergyTrading.Mdm.Contracts.MappingResponse;
    using Market = OpenNexus.MDM.Contracts.Market;
    using MarketDetails = OpenNexus.MDM.Contracts.MarketDetails;
    using Party = OpenNexus.MDM.Contracts.Party;
    using PartyAccountability = OpenNexus.MDM.Contracts.PartyAccountability;
    using PartyAccountabilityDetails = OpenNexus.MDM.Contracts.PartyAccountabilityDetails;
    using PartyCommodity = OpenNexus.MDM.Contracts.PartyCommodity;
    using PartyCommodityDetails = OpenNexus.MDM.Contracts.PartyCommodityDetails;
    using PartyDetails = OpenNexus.MDM.Contracts.PartyDetails;
    using PartyOverride = OpenNexus.MDM.Contracts.PartyOverride;
    using PartyOverrideDetails = OpenNexus.MDM.Contracts.PartyOverrideDetails;
    using PartyRole = OpenNexus.MDM.Contracts.PartyRole;
    using PartyRoleAccountability = OpenNexus.MDM.Contracts.PartyRoleAccountability;
    using PartyRoleAccountabilityDetails = OpenNexus.MDM.Contracts.PartyRoleAccountabilityDetails;
    using PartyRoleDetails = OpenNexus.MDM.Contracts.PartyRoleDetails;
    using Person = OpenNexus.MDM.Contracts.Person;
    using PersonDetails = OpenNexus.MDM.Contracts.PersonDetails;
    using Portfolio = OpenNexus.MDM.Contracts.Portfolio;
    using PortfolioDetails = OpenNexus.MDM.Contracts.PortfolioDetails;
    using PortfolioHierarchy = OpenNexus.MDM.Contracts.PortfolioHierarchy;
    using PortfolioHierarchyDetails = OpenNexus.MDM.Contracts.PortfolioHierarchyDetails;
    using Product = OpenNexus.MDM.Contracts.Product;
    using ProductCurve = OpenNexus.MDM.Contracts.ProductCurve;
    using ProductCurveDetails = OpenNexus.MDM.Contracts.ProductCurveDetails;
    using ProductDetails = OpenNexus.MDM.Contracts.ProductDetails;
    using ProductScota = OpenNexus.MDM.Contracts.ProductScota;
    using ProductScotaDetails = OpenNexus.MDM.Contracts.ProductScotaDetails;
    using ProductTenorType = OpenNexus.MDM.Contracts.ProductTenorType;
    using ProductTenorTypeDetails = OpenNexus.MDM.Contracts.ProductTenorTypeDetails;
    using ProductType = OpenNexus.MDM.Contracts.ProductType;
    using ProductTypeDetails = OpenNexus.MDM.Contracts.ProductTypeDetails;
    using ProductTypeInstance = OpenNexus.MDM.Contracts.ProductTypeInstance;
    using ProductTypeInstanceDetails = OpenNexus.MDM.Contracts.ProductTypeInstanceDetails;
    using SettlementContact = OpenNexus.MDM.Contracts.SettlementContact;
    using SettlementContactDetails = OpenNexus.MDM.Contracts.SettlementContactDetails;
    using Shape = OpenNexus.MDM.Contracts.Shape;
    using ShapeDay = OpenNexus.MDM.Contracts.ShapeDay;
    using ShapeDayDetails = OpenNexus.MDM.Contracts.ShapeDayDetails;
    using ShapeDetails = OpenNexus.MDM.Contracts.ShapeDetails;
    using ShapeElement = OpenNexus.MDM.Contracts.ShapeElement;
    using ShapeElementDetails = OpenNexus.MDM.Contracts.ShapeElementDetails;
    using ShipperCode = OpenNexus.MDM.Contracts.ShipperCode;
    using ShipperCodeDetails = OpenNexus.MDM.Contracts.ShipperCodeDetails;
    using SourceSystem = EnergyTrading.Mdm.Contracts.SourceSystem;
    using SourceSystemDetails = EnergyTrading.Mdm.Contracts.SourceSystemDetails;
    using SystemData = EnergyTrading.Mdm.Contracts.SystemData;
    using Tenor = OpenNexus.MDM.Contracts.Tenor;
    using TenorDetails = OpenNexus.MDM.Contracts.TenorDetails;
    using TenorType = OpenNexus.MDM.Contracts.TenorType;
    using TenorTypeDetails = OpenNexus.MDM.Contracts.TenorTypeDetails;
    using Unit = OpenNexus.MDM.Contracts.Unit;
    using UnitDetails = OpenNexus.MDM.Contracts.UnitDetails;
    using Vessel = OpenNexus.MDM.Contracts.Vessel;
    using VesselDetails = OpenNexus.MDM.Contracts.VesselDetails;

    public class LegacyContractsProfile : Profile
    {
        protected override void Configure()
        {
            Mapper.CreateMap<Link, LegacyLink>().ReverseMap();
            Mapper.CreateMap<Mapping, LegacyMapping>().ReverseMap();
            Mapper.CreateMap<MdmFailure, LegacyNexusFailure>().ReverseMap();
            Mapper.CreateMap<Fault, LegacyFault>().ReverseMap();
            Mapper.CreateMap<MappingResponse, LegacyMappingResponse>().ReverseMap();
            Mapper.CreateMap<MdmId, LegacyNexusId>().ReverseMap();
            Mapper.CreateMap<EntityId, LegacyEntityId>().ReverseMap();
            Mapper.CreateMap<Audit, LegacyAudit>().ReverseMap();
            Mapper.CreateMap<SystemData, LegacySystemData>().ReverseMap();
            Mapper.CreateMap<Header, LegacyHeader>().ReverseMap();
            Mapper.CreateMap<MdmIdList, LegacyNexusIdList>()
                .AfterMap((s, d) => Mapper.Map<List<MdmId>, List<LegacyNexusId>>(s, d))
                .ReverseMap();

            Mapper.CreateMap<Agreement, LegacyAgreement>().ReverseMap();
            Mapper.CreateMap<AgreementDetails, LegacyAgreementDetails>().ReverseMap();
            Mapper.CreateMap<BookDefault, LegacyBookDefault>().ReverseMap();
            Mapper.CreateMap<BookDefaultDetails, LegacyBookDefaultDetails>().ReverseMap();
            Mapper.CreateMap<Book, LegacyBook>().ReverseMap();
            Mapper.CreateMap<BookDetails, LegacyBookDetails>().ReverseMap();
            Mapper.CreateMap<BrokerCommodity, LegacyBrokerCommodity>().ReverseMap();
            Mapper.CreateMap<BrokerCommodityDetails, LegacyBrokerCommodityDetails>().ReverseMap();
            Mapper.CreateMap<BrokerRate, LegacyBrokerRate>().ReverseMap();
            Mapper.CreateMap<BrokerRateDetails, LegacyBrokerRateDetails>().ReverseMap();
            Mapper.CreateMap<Broker, LegacyBroker>().ReverseMap();
            Mapper.CreateMap<BrokerDetails, LegacyBrokerDetails>().ReverseMap();
            Mapper.CreateMap<BusinessUnit, LegacyBusinessUnit>().ReverseMap();
            Mapper.CreateMap<BusinessUnitDetails, LegacyBusinessUnitDetails>().ReverseMap();
            Mapper.CreateMap<Calendar, LegacyCalendar>().ReverseMap();
            Mapper.CreateMap<CalendarDetails, LegacyCalendarDetails>().ReverseMap();
            Mapper.CreateMap<CalendarDay, LegacyCalendarDay>().ReverseMap();
            Mapper.CreateMap<CalendarDayList, LegacyCalendarDayList>()
                .AfterMap((s, d) => Mapper.Map<List<CalendarDay>, List<LegacyCalendarDay>>(s, d))
                .ReverseMap();
            Mapper.CreateMap<CommodityFeeType, LegacyCommodityFeeType>().ReverseMap();
            Mapper.CreateMap<CommodityFeeTypeDetails, LegacyCommodityFeeTypeDetails>().ReverseMap();
            Mapper.CreateMap<CommodityInstrumentType, LegacyCommodityInstrumentType>().ReverseMap();
            Mapper.CreateMap<CommodityInstrumentTypeDetails, LegacyCommodityInstrumentTypeDetails>().ReverseMap();
            Mapper.CreateMap<Commodity, LegacyCommodity>().ReverseMap();
            Mapper.CreateMap<CommodityDetails, LegacyCommodityDetails>().ReverseMap();
            Mapper.CreateMap<Counterparty, LegacyCounterparty>().ReverseMap();
            Mapper.CreateMap<CounterpartyDetails, LegacyCounterpartyDetails>().ReverseMap();
            Mapper.CreateMap<Curve, LegacyCurve>().ReverseMap();
            Mapper.CreateMap<CurveDetails, LegacyCurveDetails>().ReverseMap();
            Mapper.CreateMap<Dimension, LegacyDimension>().ReverseMap();
            Mapper.CreateMap<DimensionDetails, LegacyDimensionDetails>().ReverseMap();
            Mapper.CreateMap<Exchange, LegacyExchange>().ReverseMap();
            Mapper.CreateMap<ExchangeDetails, LegacyExchangeDetails>().ReverseMap();
            Mapper.CreateMap<FeeType, LegacyFeeType>().ReverseMap();
            Mapper.CreateMap<FeeTypeDetails, LegacyFeeTypeDetails>().ReverseMap();
            Mapper.CreateMap<Hierarchy, LegacyHierarchy>().ReverseMap();
            Mapper.CreateMap<HierarchyDetails, LegacyHierarchyDetails>().ReverseMap();
            Mapper.CreateMap<InstrumentTypeOverride, LegacyInstrumentTypeOverride>().ReverseMap();
            Mapper.CreateMap<InstrumentTypeOverrideDetails, LegacyInstrumentTypeOverrideDetails>().ReverseMap();
            Mapper.CreateMap<InstrumentType, LegacyInstrumentType>().ReverseMap();
            Mapper.CreateMap<InstrumentTypeDetails, LegacyInstrumentTypeDetails>().ReverseMap();
            Mapper.CreateMap<LegalEntity, LegacyLegalEntity>().ReverseMap();
            Mapper.CreateMap<LegalEntityDetails, LegacyLegalEntityDetails>().ReverseMap();
            Mapper.CreateMap<Location, LegacyLocation>().ReverseMap();
            Mapper.CreateMap<LocationDetails, LegacyLocationDetails>().ReverseMap();
            Mapper.CreateMap<LocationRole, LegacyLocationRole>().ReverseMap();
            Mapper.CreateMap<LocationRoleDetails, LegacyLocationRoleDetails>().ReverseMap();
            Mapper.CreateMap<Market, LegacyMarket>().ReverseMap();
            Mapper.CreateMap<MarketDetails, LegacyMarketDetails>().ReverseMap();
            Mapper.CreateMap<PartyAccountability, LegacyPartyAccountability>().ReverseMap();
            Mapper.CreateMap<PartyAccountabilityDetails, LegacyPartyAccountabilityDetails>().ReverseMap();
            Mapper.CreateMap<PartyCommodity, LegacyPartyCommodity>().ReverseMap();
            Mapper.CreateMap<PartyCommodityDetails, LegacyPartyCommodityDetails>().ReverseMap();
            Mapper.CreateMap<PartyOverride, LegacyPartyOverride>().ReverseMap();
            Mapper.CreateMap<PartyOverrideDetails, LegacyPartyOverrideDetails>().ReverseMap();
            Mapper.CreateMap<PartyRoleAccountability, LegacyPartyRoleAccountability>().ReverseMap();
            Mapper.CreateMap<PartyRoleAccountabilityDetails, LegacyPartyRoleAccountabilityDetails>().ReverseMap();
            Mapper.CreateMap<PartyRole, LegacyPartyRole>().ReverseMap();
            Mapper.CreateMap<PartyRoleDetails, LegacyPartyRoleDetails>().ReverseMap();
            Mapper.CreateMap<Party, LegacyParty>().ReverseMap();
            Mapper.CreateMap<PartyDetails, LegacyPartyDetails>().ReverseMap();
            Mapper.CreateMap<Person, LegacyPerson>().ReverseMap();
            Mapper.CreateMap<PersonDetails, LegacyPersonDetails>().ReverseMap();
            Mapper.CreateMap<PortfolioHierarchy, LegacyPortfolioHierarchy>().ReverseMap();
            Mapper.CreateMap<PortfolioHierarchyDetails, LegacyPortfolioHierarchyDetails>().ReverseMap();
            Mapper.CreateMap<Portfolio, LegacyPortfolio>().ReverseMap();
            Mapper.CreateMap<PortfolioDetails, LegacyPortfolioDetails>().ReverseMap();
            Mapper.CreateMap<ProductCurve, LegacyProductCurve>().ReverseMap();
            Mapper.CreateMap<ProductCurveDetails, LegacyProductCurveDetails>().ReverseMap();
            Mapper.CreateMap<ProductScota, LegacyProductScota>().ReverseMap();
            Mapper.CreateMap<ProductScotaDetails, LegacyProductScotaDetails>().ReverseMap();
            Mapper.CreateMap<Product, LegacyProduct>().ReverseMap();
            Mapper.CreateMap<ProductDetails, LegacyProductDetails>().ReverseMap();
            Mapper.CreateMap<ProductTenorType, LegacyProductTenorType>().ReverseMap();
            Mapper.CreateMap<ProductTenorTypeDetails, LegacyProductTenorTypeDetails>().ReverseMap();
            Mapper.CreateMap<ProductTypeInstance, LegacyProductTypeInstance>().ReverseMap();
            Mapper.CreateMap<ProductTypeInstanceDetails, LegacyProductTypeInstanceDetails>().ReverseMap();
            Mapper.CreateMap<ProductType, LegacyProductType>().ReverseMap();
            Mapper.CreateMap<ProductTypeDetails, LegacyProductTypeDetails>().ReverseMap();
            Mapper.CreateMap<SettlementContact, LegacySettlementContact>().ReverseMap();
            Mapper.CreateMap<SettlementContactDetails, LegacySettlementContactDetails>().ReverseMap();
            Mapper.CreateMap<ShapeDay, LegacyShapeDay>().ReverseMap();
            Mapper.CreateMap<ShapeDayDetails, LegacyShapeDayDetails>().ReverseMap();
            Mapper.CreateMap<ShapeElement, LegacyShapeElement>().ReverseMap();
            Mapper.CreateMap<ShapeElementDetails, LegacyShapeElementDetails>().ReverseMap();
            Mapper.CreateMap<Shape, LegacyShape>().ReverseMap();
            Mapper.CreateMap<ShapeDetails, LegacyShapeDetails>().ReverseMap();
            Mapper.CreateMap<ShipperCode, LegacyShipperCode>().ReverseMap();
            Mapper.CreateMap<ShipperCodeDetails, LegacyShipperCodeDetails>().ReverseMap();
            Mapper.CreateMap<SourceSystem, LegacySourceSystem>().ReverseMap();
            Mapper.CreateMap<SourceSystemDetails, LegacySourceSystemDetails>().ReverseMap();
            Mapper.CreateMap<Tenor, LegacyTenor>().ReverseMap();
            Mapper.CreateMap<TenorDetails, LegacyTenorDetails>().ReverseMap();
            Mapper.CreateMap<TenorType, LegacyTenorType>().ReverseMap();
            Mapper.CreateMap<TenorTypeDetails, LegacyTenorTypeDetails>().ReverseMap();
            Mapper.CreateMap<Unit, LegacyUnit>().ReverseMap();
            Mapper.CreateMap<UnitDetails, LegacyUnitDetails>().ReverseMap();
            Mapper.CreateMap<Vessel, LegacyVessel>().ReverseMap();
            Mapper.CreateMap<VesselDetails, LegacyVesselDetails>().ReverseMap();
        }
    }
}