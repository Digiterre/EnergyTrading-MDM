<#+
// <copyright file="GetEntitySuccessfulTemplate.tt" company="RWE">
//  Copyright © RWE. All Rights Reserved.
// </copyright>

public class GetEntitySuccessfulTemplate : Template
{
    public string EntityName;
    
    public override string TransformText()
    {

#>
namespace EnergyTrading.MDM.Test
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Runtime.Serialization;

    using Microsoft.Http;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    using RWEST.Nexus.MDM.Contracts;

    [TestClass]
    public class when_a_request_is_made_for_a_<#= EntityName.ToLower() #>_and_they_exist : IntegrationTestBase
    {
        private static MDM.<#= EntityName #> <#= EntityName.ToLower() #>;

        private static RWEST.Nexus.MDM.Contracts.<#= EntityName #> returned<#= EntityName #>;

        [ClassInitialize]
        public static void ClassInit(TestContext context)
        {
            Establish_context();
            Because_of();
        }

        protected static void Establish_context()
        {
            <#= EntityName.ToLower() #> = <#= EntityName #>Data.CreateBasicEntity();
        }

        protected static void Because_of()
        {
            using (var client = new HttpClient(ServiceUrl["<#= EntityName #>"] + 
                <#= EntityName.ToLower() #>.Id))
            {
                using (HttpResponseMessage response = client.Get())
                {
                    returned<#= EntityName #> = response.Content.ReadAsDataContract<RWEST.Nexus.MDM.Contracts.<#= EntityName #>>();
                }
            }
        }

        [TestMethod]
        public void should_return_the_<#= EntityName.ToLower() #>_with_the_correct_details()
        {
            <#= EntityName #>DataChecker.CompareContractWithSavedEntity(returned<#= EntityName #>);
        }
    }

    [TestClass]
    public class when_a_request_is_made_for_a_<#= EntityName.ToLower() #>_as_of_a_date_and_they_exist : IntegrationTestBase
    {
        private static MDM.<#= EntityName #> <#= EntityName.ToLower() #>;
        private static RWEST.Nexus.MDM.Contracts.<#= EntityName #> returned<#= EntityName #>;
        private static DateTime asof;
        private static HttpClient client;

        [ClassInitialize]
        public static void ClassInit(TestContext context)
        {
            Establish_context();
            Because_of();
        }

        protected static void Establish_context()
        {
            <#= EntityName.ToLower() #> = <#= EntityName #>Data.CreateBasicEntity();
        }

        protected static void Because_of()
        {
            asof = Script.baseDate.AddSeconds(1);
            client =
                new HttpClient(ServiceUrl["<#= EntityName #>"] + string.Format("{0}?as-of={1}",
                    <#= EntityName.ToLower() #>.Id.ToString(), asof.ToString(DateFormatString)));

            HttpResponseMessage response = client.Get();
            returned<#= EntityName #> = response.Content.ReadAsDataContract<RWEST.Nexus.MDM.Contracts.<#= EntityName #>>();
        }

        [TestMethod]
        public void should_return_the_<#= EntityName.ToLower() #>_with_the_correct_details()
        {
            <#= EntityName #>DataChecker.CompareContractWithSavedEntity(returned<#= EntityName #>);
        }
    }

    [TestClass]
    public class when_a_list_request_is_made_for_a_<#= EntityName.ToLower() #>_and_they_exist : IntegrationTestBase
    {
        private static MDM.<#= EntityName #> <#= EntityName.ToLower() #>;

        private static IList<RWEST.Nexus.MDM.Contracts.<#= EntityName #>> returned<#= EntityName #>s;

        [ClassInitialize]
        public static void ClassInit(TestContext context)
        {
            Establish_context();
            Because_of();
        }

        protected static void Establish_context()
        {
            <#= EntityName.ToLower() #> = <#= EntityName #>Data.CreateBasicEntity();
        }

        protected static void Because_of()
        {
            using (var client = new HttpClient(ServiceUrl["<#= EntityName #>"] + string.Format("{0}/list",
                    <#= EntityName.ToLower() #>.Id.ToString())))
            {
                using (HttpResponseMessage response = client.Get())
                {
                    returned<#= EntityName #>s = response.Content.ReadAsDataContract<IList<<#= EntityName #>>>();
                }
            }
        }

        [TestMethod]
        public void should_return_the_<#= EntityName.ToLower() #>_with_the_correct_details()
        {
            foreach (var <#= EntityName.ToLower() #> in returned<#= EntityName #>s)
            {
                <#= EntityName #>DataChecker.CompareContractWithSavedEntity(<#= EntityName.ToLower() #>);
            }
        }
    }
}<#+
        return this.GenerationEnvironment.ToString();
    }
}
#>
