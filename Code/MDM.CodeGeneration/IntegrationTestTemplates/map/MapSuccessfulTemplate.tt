<#+
// <copyright file="MapSuccessfulTemplate.tt" company="RWE">
//  Copyright © RWE. All Rights Reserved.
// </copyright>

public class MapSuccessfulTemplate : Template
{
    public string EntityName;
    
    public override string TransformText()
    {

#>
namespace EnergyTrading.MDM.Test
{
    using System;
    using System.Configuration;
    using System.Linq;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Data.SqlTypes;

    using Microsoft.Http;
    using NUnit.Framework;

    using RWEST.Nexus.MDM.Contracts;

    [TestFixture]
    public class when_a_source_system_to_master_data_service_mapping_request_is_made_as_of_a_specific_date_<#= EntityName.ToLower() #>  : IntegrationTestBase
    {
        private static HttpResponseMessage response;
        private static <#= EntityName #>Details firstDetails;
        private static HttpClient client;
        private static MDM.<#= EntityName #> <#= EntityName.ToLower() #>;

        [SetUp]
        public static void ClassInit(TestContext context)
        {
            Establish_context();
            Because_of();
        }

        protected static void Establish_context()
        {
            <#= EntityName.ToLower() #> = <#= EntityName #>Data.CreateEntityWithTwoDetailsAndTwoMappings();
        }

        protected static void Because_of()
        {
            client = new HttpClient(ServiceUrl["<#= EntityName #>"] +
                    "map?source-system=Trayport&mapping-string=" + <#= EntityName.ToLower() #>.Mappings[0].MappingValue + "&as-of=" +
                    <#= EntityName.ToLower() #>.Validity.Start.ToString(DateFormatString));

            response = client.Get();
        }

        [Test]
        public void should_return_the_correct_vesrion_of_the_<#= EntityName.ToLower() #>()
        {
            var <#= EntityName.ToLower() #> = response.Content.ReadAsDataContract<RWEST.Nexus.MDM.Contracts.<#= EntityName #>>();

            <#= EntityName #>DataChecker.CompareContractWithSavedEntity(<#= EntityName.ToLower() #>);
        }

        [Test]
        public void should_return_correct_content_type()
        {
            Assert.AreEqual(ConfigurationManager.AppSettings["restReturnType"], response.Content.ContentType);
        }

        [Test]
        public void should_return_status_ok()
        {
            response.StatusCode = HttpStatusCode.OK;
        }
    }

    [TestFixture]
    public class when_a_source_system_to_master_data_service_mapping_request_is_made_as_of_now_for_<#= EntityName.ToLower() #> : IntegrationTestBase
    {
        private static HttpResponseMessage response;
        private static HttpClient client;
        private static MDM.<#= EntityName #> <#= EntityName.ToLower() #>;

        [SetUp]
        public static void ClassInit(TestContext context)
        {
            Establish_context();
            Because_of();
        }

        protected static void Establish_context()
        {
            <#= EntityName.ToLower() #> = <#= EntityName #>Data.CreateEntityWithTwoDetailsAndTwoMappings();
        }

        protected static void Because_of()
        {
            client = new HttpClient(ServiceUrl["<#= EntityName #>"] +
                "map?source-system=Trayport&mapping-string=" + <#= EntityName.ToLower() #>.Mappings[0].MappingValue);

            response = client.Get();
        }

        [Test]
        public void should_return_the_correct_vesrion_of_the_<#= EntityName.ToLower() #>()
        {
            var <#= EntityName.ToLower() #> = response.Content.ReadAsDataContract<RWEST.Nexus.MDM.Contracts.<#= EntityName #>>();

            <#= EntityName #>DataChecker.CompareContractWithSavedEntity(<#= EntityName.ToLower() #>);
        }

        [Test]
        public void should_return_correct_content_type()
        {
            Assert.AreEqual(ConfigurationManager.AppSettings["restReturnType"], response.Content.ContentType);
        }

        [Test]
        public void should_return_status_ok()
        {
            response.StatusCode = HttpStatusCode.OK;
        }
    }
}<#+
        return this.GenerationEnvironment.ToString();
    }
}
#>
