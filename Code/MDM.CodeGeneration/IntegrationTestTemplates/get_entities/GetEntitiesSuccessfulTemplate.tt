<#+
// <copyright file="GetEntitiesSuccessfulTemplate.tt" company="RWE">
//  Copyright © RWE. All Rights Reserved.
// </copyright>

public class GetEntitiesSuccessfulTemplate : Template
{
    public string EntityName;

    public override string TransformText()
    {
    #>
namespace EnergyTrading.MDM.Test
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    using System.Linq;

    using Microsoft.Http;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    using RWEST.Nexus.MDM.Contracts;

    [TestClass]
    public class when_a_request_is_made_for_all_<#= EntityName.ToLower() #> : IntegrationTestBase
    {
        private static IList<RWEST.Nexus.MDM.Contracts.<#= EntityName #>> returned<#= EntityName #>s;

        private static MDM.<#= EntityName #> entity1;

        private static MDM.<#= EntityName #> entity2;

        [ClassInitialize]
        public static void ClassInit(TestContext context)
        {
            Establish_context();
            Because_of();
        }

        protected static void Establish_context()
        {
            entity1 = <#= EntityName #>Data.CreateBasicEntity();
            entity2 = <#= EntityName #>Data.CreateBasicEntity();
        }

        protected static void Because_of()
        {
            using (var client = new HttpClient(ServiceUrl["<#= EntityName #>"] + "list"))
            {
                using (HttpResponseMessage response = client.Get())
                {
                    returned<#= EntityName #>s = response.Content.ReadAsDataContract<<#= EntityName #>List>();
                }
            }
        }

        [TestMethod]
        public void should_return_the_<#= EntityName.ToLower() #>_with_the_correct_details()
        {
            foreach (var <#= EntityName.ToLower() #> in returned<#= EntityName #>s)
            {
                <#= EntityName #>DataChecker.CompareContractWithSavedEntity(<#= EntityName.ToLower() #>);
            }
        }

        [TestMethod]
        public void should_contain_the_new_entities_that_were_added()
        {
            IList<RWEST.Nexus.MDM.Contracts.NexusId> entityIds = returned<#= EntityName #>s.Select(x => x.Identifiers.First(id => id.IsNexusId)).ToList();
            Assert.IsTrue(entityIds.Any(nexusId => nexusId.Identifier == entity1.Id.ToString()));
            Assert.IsTrue(entityIds.Any(nexusId => nexusId.Identifier == entity2.Id.ToString()));
        }
    }
}
    
    <#+

        return this.GenerationEnvironment.ToString();
    }
}
#>
