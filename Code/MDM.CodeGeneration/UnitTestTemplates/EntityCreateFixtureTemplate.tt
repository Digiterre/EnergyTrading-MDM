<#+
// <copyright file="EntityCreateFixtureTemplate.tt" company="RWE">
//  Copyright © RWE. All Rights Reserved.
// </copyright>

public class EntityCreateFixtureTemplate : Template
{
    public string EntityName;

    public override string TransformText()
    {
    #>
namespace EnergyTrading.MDM.Test.Services
{
    using System.Collections.Generic;

    using NUnit.Framework;

    using Moq;

    using EnergyTrading.Data;
    using EnergyTrading.Mapping;
    using EnergyTrading.MDM.Services;
    using EnergyTrading.Search;
    using EnergyTrading.Validation;

    [TestFixture]
    public class <#= EntityName #>CreateFixture
    {
        [Test]
        [ExpectedException(typeof(ValidationException))]
        public void NullContractInvalid()
        {
            // Arrange
            var validatorFactory = new Mock<IValidatorEngine>(); 
            var mappingEngine = new Mock<IMappingEngine>();
            var repository = new Mock<IRepository>();
            var searchCache = new Mock<ISearchCache>();

            var service = new <#= EntityName #>Service(validatorFactory.Object, mappingEngine.Object, repository.Object, searchCache.Object);

            validatorFactory.Setup(x => x.IsValid(It.IsAny<object>(), It.IsAny<IList<IRule>>())).Returns(false);
           
            // Act
            service.Create(null);
        }

        [Test]
        [ExpectedException(typeof(ValidationException))]
        public void InvalidContractNotSaved()
        {
            // Arrange
            var validatorFactory = new Mock<IValidatorEngine>();
            var mappingEngine = new Mock<IMappingEngine>();
            var repository = new Mock<IRepository>();
            var searchCache = new Mock<ISearchCache>();

            var service = new <#= EntityName #>Service(validatorFactory.Object, mappingEngine.Object, repository.Object, searchCache.Object);

            var contract = new RWEST.Nexus.MDM.Contracts.<#= EntityName #>();

            validatorFactory.Setup(x => x.IsValid(It.IsAny<object>(), It.IsAny<IList<IRule>>())).Returns(false);

            // Act
            service.Create(contract);
        }

        [Test]
        public void ValidContractIsSaved()
        {
            // Arrange
            var validatorFactory = new Mock<IValidatorEngine>();
            var mappingEngine = new Mock<IMappingEngine>();
            var repository = new Mock<IRepository>();
            var searchCache = new Mock<ISearchCache>();

            var service = new <#= EntityName #>Service(validatorFactory.Object, mappingEngine.Object, repository.Object, searchCache.Object);

            var <#= EntityName.ToLower() #> = new <#= EntityName #>();
            var contract = new RWEST.Nexus.MDM.Contracts.<#= EntityName #>();

            validatorFactory.Setup(x => x.IsValid(It.IsAny<RWEST.Nexus.MDM.Contracts.<#= EntityName #>>(), It.IsAny<IList<IRule>>())).Returns(true);
            mappingEngine.Setup(x => x.Map<RWEST.Nexus.MDM.Contracts.<#= EntityName #>, <#= EntityName #>>(contract)).Returns(<#= EntityName.ToLower() #>);

            // Act
            var expected = service.Create(contract);

            // Assert
            Assert.AreSame(expected, <#= EntityName.ToLower() #>, "<#= EntityName #> differs");
            repository.Verify(x => x.Add(<#= EntityName.ToLower() #>));
            repository.Verify(x => x.Flush());
        }
    }
}
    <#+
        return this.GenerationEnvironment.ToString();
    }
}
#>
