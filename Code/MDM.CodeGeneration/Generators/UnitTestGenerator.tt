<#@ include file="..\UnitTestTemplates\ContractCheckerTemplate.tt" #>
<#@ include file="..\UnitTestTemplates\ContractDetailsCheckerTemplate.tt" #>
<#@ include file="..\UnitTestTemplates\EntityCheckerTemplate.tt" #>
<#@ include file="..\UnitTestTemplates\EntityMappingCheckerTemplate.tt" #>
<#@ include file="..\UnitTestTemplates\EntityMapperFixtureTemplate.tt" #>
<#@ include file="..\UnitTestTemplates\EntityValidatorFixtureTemplate.tt" #>
<#@ include file="..\UnitTestTemplates\EntityMappingRepositoryFixtureTemplate.tt" #>
<#@ include file="..\UnitTestTemplates\EntityRepositoryFixtureTemplate.tt" #>
<#@ include file="..\UnitTestTemplates\EntityCreateFixtureTemplate.tt" #>
<#@ include file="..\UnitTestTemplates\EntityCreateMappingFixtureTemplate.tt" #>
<#@ include file="..\UnitTestTemplates\EntityCrossMapFixtureTemplate.tt" #>
<#@ include file="..\UnitTestTemplates\TemporalEntityUpdateFixtureTemplate.tt" #>
<#@ include file="..\UnitTestTemplates\TemporalEntityCrossMapFixtureTemplate.tt" #>
<#@ include file="..\UnitTestTemplates\EntityMapFixtureTemplate.tt" #>
<#@ include file="..\UnitTestTemplates\EntityUpdateFixtureTemplate.tt" #>
<#@ include file="..\UnitTestTemplates\EntityUpdateMappingFixtureTemplate.tt" #>
<#@ include file="..\UnitTestTemplates\EntityDetailsContractMapperFixtureTemplate.tt" #>
<#@ include file="..\UnitTestTemplates\EntityDetailsMapperFixtureTemplate.tt" #>

<#+
// <copyright file="TestGenerator.tt" company="RWE">
//  Copyright © RWE. All Rights Reserved.
// </copyright>

public class UnitTestGenerator : Generator
{
    public string EntityName;
    public string MappingName;
    public bool IsTemporal;
    public bool preserveFiles;

    protected override void RunCore()
    {		
        var project = @"..\..\UnitTest\MDM.UnitTest.csproj";
        var rootFolder = @"..\UnitTest\";

        if(IsTemporal)
        {
            CreateTemplates(new TemporalEntityUpdateFixtureTemplate() { EntityName = EntityName, MappingName = MappingName },
                preserveFiles, rootFolder + @"Services\" + EntityName + "UpdateFixture.cs", project);
            CreateTemplates(new TemporalEntityCrossMapFixtureTemplate() { EntityName = EntityName, MappingName = MappingName },
                preserveFiles, rootFolder + @"Services\" + EntityName + "CrossMapFixture.cs", project);
        }
        else
        {
            CreateTemplates(new EntityUpdateFixtureTemplate() { EntityName = EntityName, MappingName = MappingName },
                preserveFiles, rootFolder + @"Services\" + EntityName + "UpdateFixture.cs", project);
            CreateTemplates(new EntityCrossMapFixtureTemplate() { EntityName = EntityName, MappingName = MappingName },
                preserveFiles, rootFolder + @"Services\" + EntityName + "CrossMapFixture.cs", project);
        }

        CreateTemplates(new EntityUpdateMappingFixtureTemplate() { EntityName = EntityName},
            preserveFiles, rootFolder + @"Services\" + EntityName + "UpdateMappingFixture.cs", project);
        CreateTemplates(new EntityMapFixtureTemplate() { EntityName = EntityName, MappingName = MappingName },
            preserveFiles, rootFolder + @"Services\" + EntityName + "MapFixture.cs", project);
        CreateTemplates(new EntityCreateMappingFixtureTemplate() { EntityName = EntityName },
            preserveFiles, rootFolder + @"Services\" + EntityName + "CreateMappingFixture.cs", project);
        CreateTemplates(new EntityCreateFixtureTemplate() { EntityName = EntityName },
            preserveFiles, rootFolder + @"Services\" + EntityName + "CreateFixture.cs", project);
        CreateTemplates(new EntityRepositoryFixtureTemplate() { EntityName = EntityName },
            preserveFiles, rootFolder + @"Data\EF\" + EntityName + "RepositoryFixture.cs", project);
        CreateTemplates(new EntityMappingRepositoryFixtureTemplate() { EntityName = EntityName },
            preserveFiles, rootFolder + @"Data\EF\" + EntityName + "MappingRepositoryFixture.cs", project);
        CreateTemplates(new EntityValidatorFixtureTemplate() { EntityName = EntityName, MappingName = MappingName},
            preserveFiles, rootFolder + @"Contracts\Validators\" + EntityName + "ValidatorFixture.cs", project);
        CreateTemplates(new EntityMapperFixtureTemplate() { EntityName = EntityName },
            preserveFiles, rootFolder + @"Contracts\Mappers\" + EntityName + "MapperFixture.cs", project);
        CreateTemplates(new ContractCheckerTemplate() { EntityName = EntityName },
            preserveFiles, rootFolder + @"Checkers\Contracts\" + EntityName + "Checker.cs", project);
        CreateTemplates(new ContractDetailsCheckerTemplate() { EntityName = EntityName },
            preserveFiles, rootFolder + @"Checkers\Contracts\" + EntityName + "DetailsChecker.cs", project);
        CreateTemplates(new EntityCheckerTemplate() { EntityName = EntityName },
            preserveFiles, rootFolder + @"Checkers\Mapping\" + EntityName + "Checker.cs", project);
        CreateTemplates(new EntityMappingCheckerTemplate() { EntityName = EntityName },
            preserveFiles, rootFolder + @"Checkers\Mapping\" + EntityName + "MappingChecker.cs", project);
        CreateTemplates(new EntityDetailsContractMapperFixtureTemplate() { EntityName = EntityName },
            preserveFiles, rootFolder + @"Contracts\Mappers\" + EntityName + "DetailsMapperFixture.cs", project);
        CreateTemplates(new EntityDetailsMapperFixtureTemplate() { EntityName = EntityName, IsTemporal = IsTemporal },
            preserveFiles, rootFolder + @"Mappers\" + EntityName + "DetailsMapperFixture.cs", project);
    }
    
    private void CreateTemplates(Template template, bool preserve, string file, string project)
    {
        template.Output.PreserveExistingFile = preserve;
        template.Output.File = file;
        template.Output.Project = project;
        template.Render();
    }
}
#>
