<#@ import namespace="System.Collections.Generic" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="..\IntegrationTestTemplates\create_entity_instance\CreateEntitySuccessfulTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\create_entity_instance\CreateEntityXmlDataInvalidTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\delete_mapping\DeleteMappingSuccessfulTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\create_mapping\CreateMappingConflictTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\create_mapping\CreateMappingSuccessfulTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\create_mapping\CreateMappingXmlDataInvalidTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\crossmap\CrossmapDestinationSystemMappingUnkownTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\crossmap\CrossmapSourceSystemMappingUnkownTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\crossmap\CrossmapSuccessfulTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\get_entity\GetEntityNotFoundTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\get_entity\GetEntitySuccessfulTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\get_entities\GetEntitiesSuccessfulTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\get_mapping_for_entity\GetEntityMappingNotFoundTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\get_mapping_for_entity\GetEntityMappingSuccessfulTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\map\MapMappingStringUnkownTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\map\MapSuccessfulTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\update_entity_instance\UpdateEntityNotFoundTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\update_entity_instance\UpdateEntitySuccessTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\update_entity_instance\UpdateEntityVersionConflictTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\update_entity_instance\UpdateEntityXmlDataInvalidTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\update_mapping\UpdateMappingNotFoundTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\update_mapping\UpdateMappingSuccessTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\update_mapping\UpdateMappingVersionConflictTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\update_mapping\UpdateMappingXmlDataInvalidTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\search\InvalidSearchTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\search\NoSearchResultsTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\search\SuccessSearchResultsByMappingTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\search\SuccessSearchResultsTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\search\SuccessSearchResultsPagedTemplate.tt" #>
<#@ include file="..\IntegrationTestTemplates\search\SuccessSearchTemplate.tt" #>

<#+
// <copyright file="IntegrationTestGenerator.tt" company="RWE">
//  Copyright © RWE. All Rights Reserved.
// </copyright>

public class IntegrationTestGenerator : Generator
{
    public List<Tuple<string, bool, Type, Type, string>> entities;
    public bool preserveFiles;

    protected override void RunCore()
    {
        var project = @"..\..\IntegrationTest\MDM.IntegrationTest.csproj";

        foreach(var e in entities)
        {
            var rootFolder = @"..\IntegrationTest\" + e.Item1 + @"\";
            
            CreateTemplates(new SuccessSearchResultsPagedTemplate() { EntityName = e.Item1 },
                true, rootFolder + @"search\" + "success_search_results_paged.cs", project);

            CreateTemplates(new SuccessSearchTemplate() { EntityName = e.Item1 },
                true, rootFolder + @"search\" + "success_search.cs", project);
                
            CreateTemplates(new SuccessSearchResultsTemplate() { EntityName = e.Item1 },
                true, rootFolder + @"search\" + "success_search_results.cs", project);
             
            CreateTemplates(new SuccessSearchResultsByMappingTemplate() { EntityName = e.Item1 },
                true, rootFolder + @"search\" + "success_search_results_by_mapping.cs", project);
                
            CreateTemplates(new InvalidSearchTemplate() { EntityName = e.Item1 },
                true, rootFolder + @"search\" + "invalid_search.cs", project);
            
            CreateTemplates(new NoSearchResultsTemplate() { EntityName = e.Item1 },
                true, rootFolder + @"search\" + "no_results_search.cs", project);
                
            CreateTemplates(new CreateEntitySuccessfulTemplate() { EntityName = e.Item1 }, 
               true, rootFolder + @"create_entity_instance\" + "successful.cs", project);
             
            CreateTemplates(new CreateEntityXmlDataInvalidTemplate() { EntityName = e.Item1 }, 
                true, rootFolder + @"create_entity_instance\" + "xml_data_invalid.cs", project);

            CreateTemplates(new DeleteMappingSuccessfulTemplate() { EntityName = e.Item1 },
                true, rootFolder + @"delete_mapping\" + "success.cs", project);

            CreateTemplates(new CreateMappingConflictTemplate() { EntityName = e.Item1 }, 
                true, rootFolder + @"create_mapping\" + "conflict.cs", project);

            CreateTemplates(new CreateMappingSuccessfulTemplate() { EntityName = e.Item1, MappingName = e.Item5}, 
                true, rootFolder + @"create_mapping\" + "successful.cs", project);

            CreateTemplates(new CreateMappingXmlDataInvalidTemplate() { EntityName = e.Item1 }, 
                true, rootFolder + @"create_mapping\" + "xml_data_invalid.cs", project);

            CreateTemplates(new CrossmapDestinationSystemMappingUnkownTemplate() { EntityName = e.Item1 }, 
                true, rootFolder + @"crossmap\" + "destination_system_mapping_unkown.cs", project);

            CreateTemplates(new CrossmapSourceSystemMappingUnkownTemplate() { EntityName = e.Item1 }, 
                true, rootFolder + @"crossmap\" + "source_system_mapping_unkown.cs", project);

            CreateTemplates(new CrossmapSuccessfulTemplate() { EntityName = e.Item1 }, 
                true, rootFolder + @"crossmap\" + "successful.cs", project);

            CreateTemplates(new GetEntitiesSuccessfulTemplate() { EntityName = e.Item1 }, 
                true, rootFolder + @"get_entities\" + "successful.cs", project);

            CreateTemplates(new GetEntityNotFoundTemplate() { EntityName = e.Item1 }, 
                true, rootFolder + @"get_entity\" + "entity_not_found.cs", project);

            CreateTemplates(new GetEntitySuccessfulTemplate() { EntityName = e.Item1 }, 
                true, rootFolder + @"get_entity\" + "successful.cs", project);

            CreateTemplates(new GetEntityMappingNotFoundTemplate() { EntityName = e.Item1 }, 
                true, rootFolder + @"get_mapping_for_entity\" + "mapping_not_found.cs", project);

            CreateTemplates(new GetEntityMappingSuccessfulTemplate() { EntityName = e.Item1, MappingName = e.Item5 }, 
                true, rootFolder + @"get_mapping_for_entity\" + "successful.cs", project);

            CreateTemplates(new MapMappingStringUnkownTemplate() { EntityName = e.Item1 }, 
                true, rootFolder + @"map\" + "mapping_string_unkown.cs", project);
            
            CreateTemplates(new MapSuccessfulTemplate() { EntityName = e.Item1 }, 
                true, rootFolder + @"map\" + "successful.cs", project);

            CreateTemplates(new UpdateEntityNotFoundTemplate() { EntityName = e.Item1 }, 
                true, rootFolder + @"update_entity_instance\" + "entity_not_found.cs", project);

            CreateTemplates(new UpdateEntitySuccessTemplate() { EntityName = e.Item1 }, 
                true, rootFolder + @"update_entity_instance\" + "success.cs", project);

            CreateTemplates(new UpdateEntityVersionConflictTemplate() { EntityName = e.Item1 }, 
                true, rootFolder + @"update_entity_instance\" + "version_conflict.cs", project);

            CreateTemplates(new UpdateEntityXmlDataInvalidTemplate() { EntityName = e.Item1 }, 
                true, rootFolder + @"update_entity_instance\" + "xml_data_invalid.cs", project);

            CreateTemplates(new UpdateMappingNotFoundTemplate() { EntityName = e.Item1, MappingName = e.Item5 }, 
                true, rootFolder + @"update_mapping\" + "entity_not_found.cs", project);

            CreateTemplates(new UpdateMappingSuccessTemplate() { EntityName = e.Item1, MappingName = e.Item5}, 
                true, rootFolder + @"update_mapping\" + "success.cs", project);
            
            CreateTemplates(new UpdateMappingVersionConflictTemplate() { EntityName = e.Item1, MappingName = e.Item5}, 
                true, rootFolder + @"update_mapping\" + "version_conflict.cs", project);

            CreateTemplates(new UpdateMappingXmlDataInvalidTemplate() { EntityName = e.Item1, MappingName = e.Item5}, 
                true, rootFolder + @"update_mapping\" + "xml_data_invalid.cs", project);

        }
    }

    private void CreateTemplates(Template template, bool preserve, string file, string project)
    {
        template.Output.PreserveExistingFile = false;
        template.Output.File = file;
        template.Output.Project = project;
        template.Render();
    }
}
#>
